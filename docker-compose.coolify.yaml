version: "3.9"

x-env-common: &env_common
  RAILS_ENV: ${RAILS_ENV:-production}
  NODE_ENV: ${NODE_ENV:-production}
  INSTALLATION_ENV: ${INSTALLATION_ENV:-docker}
  SECRET_KEY_BASE: ${SECRET_KEY_BASE}
  FRONTEND_URL: ${FRONTEND_URL:-https://chatwoot.example.com}
  DATABASE_URL: postgres://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-chatwoot}
  REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379/0
  REDIS_OPENSSL_VERIFY_MODE: ${REDIS_OPENSSL_VERIFY_MODE:-none}
  MAILER_SENDER_EMAIL: ${MAILER_SENDER_EMAIL:-Chatwoot <accounts@example.com>}
  SMTP_ADDRESS: ${SMTP_ADDRESS:-smtp.example.com}
  SMTP_PORT: ${SMTP_PORT:-587}
  SMTP_USERNAME: ${SMTP_USERNAME:-smtp-user}
  SMTP_PASSWORD: ${SMTP_PASSWORD:-smtp-password}
  SMTP_DOMAIN: ${SMTP_DOMAIN:-example.com}
  SMTP_AUTHENTICATION: ${SMTP_AUTHENTICATION:-login}
  SMTP_ENABLE_STARTTLS_AUTO: ${SMTP_ENABLE_STARTTLS_AUTO:-true}
  ENABLE_ACCOUNT_SIGNUP: ${ENABLE_ACCOUNT_SIGNUP:-false}
  DEFAULT_LOCALE: ${CHATWOOT_DEFAULT_LOCALE:-en}
  ACTIVE_STORAGE_SERVICE: ${ACTIVE_STORAGE_SERVICE:-local}
  FORCE_SSL: ${FORCE_SSL:-false}

services:
  postgres:
    image: ghcr.io/chatwoot/pgvector:16
    pull_policy: always
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chatwoot}
      POSTGRES_USER: ${POSTGRES_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-postgres} -d ${POSTGRES_DB:-chatwoot} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 12

  redis:
    image: redis:7-alpine
    pull_policy: always
    restart: always
    command: >
      sh -c 'redis-server --appendonly yes --requirepass "$$REDIS_PASSWORD"'
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "PING"]
      interval: 10s
      timeout: 5s
      retries: 12

  db_prepare:
    image: ${CHATWOOT_IMAGE:-romsribn/chatwoot-poker:latest}
    pull_policy: always
    restart: "no"
    environment:
      <<: *env_common

    command: ["bundle", "exec", "rails", "db:chatwoot_prepare"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  chatwoot:
    image: ${CHATWOOT_IMAGE:-romsribn/chatwoot-poker:latest}
    pull_policy: always
    restart: always
    environment:
      <<: *env_common
      SERVICE_FQDN_CHATWOOT_3000: ${SERVICE_FQDN_CHATWOOT_3000}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db_prepare:
        condition: service_completed_successfully
    volumes:
      - rails-data:/app/storage
      - rails-assets:/app/public/packs
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:3000"]
      interval: 10s
      timeout: 5s
      retries: 24

  sidekiq:
    image: ${CHATWOOT_IMAGE:-romsribn/chatwoot-poker:latest}
    pull_policy: always
    restart: always
    environment:
      <<: *env_common
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db_prepare:
        condition: service_completed_successfully
    volumes:
      - rails-data:/app/storage
      - rails-assets:/app/public/packs
    healthcheck:
      test: ["CMD-SHELL", "bundle exec rails runner 'puts Sidekiq.redis(&:info)' > /dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  rails-data:
  rails-assets:
  postgres-data:
  redis-data:
